let BPCKey = btoa(new Date().getTime()+"BPC")
let BPCValid = false;
let challengeId = parseInt(Math.random() * (8 - 0) + 0);
let BPCChallenges = [
    { 
        "title":"Selecciona un teléfono", 
        options: [
            "1.png",
            "2.png",
            "3.png",
            "4.png"
        ],
        a: 1 
    },
    { 
        "title":"Selecciona una estrella", 
        options: [
            "9.png",
            "6.png",
            "7.png",
            "4.png"
        ],
        a: 0 
    },
    { 
        "title":"Selecciona un fantasma", 
        options: [
            "1.png",
            "6.png",
            "8.png",
            "7.png"
        ],
        a: 2 
    },
    { 
        "title":"Selecciona un celular", 
        options: [
            "7.png",
            "3.png",
            "6.png",
            "4.png"
        ],
        a: 0 
    },
    { 
        "title":"Selecciona una llave", 
        options: [
            "7.png",
            "3.png",
            "6.png",
            "4.png"
        ],
        a: 2 
    },
    { 
        "title":"Selecciona un corazón", 
        options: [
            "2.png",
            "3.png",
            "1.png",
            "5.png"
        ],
        a: 3 
    },
    { 
        "title":"Selecciona una lupa", 
        options: [
            "8.png",
            "9.png",
            "4.png",
            "5.png"
        ],
        a: 2 
    },
    { 
        "title":"Selecciona un lápiz", 
        options: [
            "8.png",
            "9.png",
            "3.png",
            "5.png"
        ],
        a: 2 
    },
]

window.onload = function(){

}

function initCaptcha(){

    let buttons = document.getElementsByClassName('betplaycaptcha');

    console.log("Initializing...");

    detectPrivateMode(function (isPrivateMode) {
        window.isPrivateMode = isPrivateMode
    })
    console.log(buttons);
    for (let i = 0; i < buttons.length; i++) {
        initButton(buttons[i])
    }
}

function validateBPC(e) {
    e.preventDefault();
    setTimeout(() => {
        if(hasClass(this,BPCKey))
        {
            window.BPCValid = true
        }

        if(window.BPCValid)
        {
            window[this.dataset.callback]();
        }
        else
        {
            launchCaptchaValidation();
        }
    });
    
}

function hasClass(element, className){
    return (" " + element.classList.value + " ").indexOf(className) != -1
}

function launchCaptchaValidation()
{   
    if(!document.getElementById('bpcaptcha'))
    {
        let background = document.createElement("div");
        background.id = "bpcaptcha";
        background.setAttribute("style","z-index:9999; font-family:sans-serif; background: #ffffff78; position:fixed; left:0; top:0; width:100%;height:100%; display:flex; align-items:center; justify-content:center");
        let captchaBox = document.createElement("div")
        captchaBox.setAttribute("style","background: #002361; text-align:center; color:#FFF;padding:1em;");
        let title = document.createElement("h2")
        title.innerHTML = BPCChallenges[challengeId].title 
        title.setAttribute("style","text-align:center");
        captchaBox.append(title)
        let contentOptions = document.createElement('ul')
        contentOptions.setAttribute("style", "display:flex; background: #FFF; padding:1em; justify-content:space-between; list-style:none;")
        let option1 = document.createElement('li')
        option1.innerHTML = '<label for="BPCoption1"> <input style="vertical-align:middle" type="radio" name="BPCoption" id="BPCoption1" value="0"> <img style="vertical-align:middle; max-width:30px; margin-right:1em; cursor:pointer" src="assets/bpcaptcha/bpcassets/'+ BPCChallenges[challengeId].options[0] +'"></label>'
        let option2 = document.createElement('li')
        option2.innerHTML = '<label for="BPCoption2"> <input style="vertical-align:middle" type="radio" name="BPCoption" id="BPCoption2" value="1"> <img style="vertical-align:middle; max-width:30px; margin-right:1em; cursor:pointer" src="assets/bpcaptcha/bpcassets/'+ BPCChallenges[challengeId].options[1] +'"></label>'
        let option3 = document.createElement('li')
        option3.innerHTML = '<label for="BPCoption3"> <input style="vertical-align:middle" type="radio" name="BPCoption" id="BPCoption3" value="2"> <img style="vertical-align:middle; max-width:30px; margin-right:1em; cursor:pointer" src="assets/bpcaptcha/bpcassets/'+ BPCChallenges[challengeId].options[2] +'"></label>'
        let option4 = document.createElement('li')
        option4.innerHTML = '<label for="BPCoption4"> <input style="vertical-align:middle" type="radio" name="BPCoption" id="BPCoption4" value="3"> <img style="vertical-align:middle; max-width:30px; margin-right:1em; cursor:pointer" src="assets/bpcaptcha/bpcassets/'+ BPCChallenges[challengeId].options[3] +'"></label>'
        contentOptions.append(option1)
        contentOptions.append(option2)
        contentOptions.append(option3)
        contentOptions.append(option4)
        captchaBox.append(contentOptions)

        let error = document.createElement("div")
        error.id="BPCError"
        error.setAttribute("style", "color:#721c24; text-align:center; margin-bottom:1em;")
        captchaBox.append(error)

        let button = document.createElement("button")
        button.innerHTML = "CONFIRMAR";
        button.addEventListener('click', validateBPCaptcha)
        button.setAttribute("style","border: 1px solid #00ae42; background: #00ae42; border-radius:5px; padding: 1em; color:#FFF;")
        captchaBox.append(button)
        background.append(captchaBox);
        document.body.append(background);
    }
}

function validateBPCaptcha() {
    setErrorBPC("")
    // Remove error error
    let choosen = document.querySelector('input[name="BPCoption"]:checked');
    if(choosen) {
        if(choosen.value == BPCChallenges[challengeId].a) {
            BPCValid = true
            document.getElementById('bpcaptcha').remove()
        } else {
            // Show error
            setErrorBPC("Intentalo de nuevo")
        }
    } else {
        // Add error
        setErrorBPC("Selecciona una opción")
    }
}

function setErrorBPC(error){
    let err = document.getElementById('BPCError')
    err.innerHTML = error
}

function initButton(button) {
    button.addEventListener('click',validateBPC);
    button.addEventListener('mouseover',addClassBPC);
    button.addEventListener('mouseout',removeClass);
}

function removeClass() {
    this.classList.remove(BPCKey)
}

function addClassBPC() {
    this.classList.add(BPCKey)
}

window.mobileCheck = function() {
    let check = false;
    (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
    return check;
};

function detectPrivateMode(cb) {
    var db,
    on = cb.bind(null, true),
    off = cb.bind(null, false)

    function tryls() {
        try {
            localStorage.length ? off() : (localStorage.x = 1, localStorage.removeItem("x"), off());
        } catch (e) {
            // Safari only enables cookie in private mode
            // if cookie is disabled then all client side storage is disabled
            // if all client side storage is disabled, then there is no point
            // in using private mode
            navigator.cookieEnabled ? on() : off();
        }
    }

    // Blink (chrome & opera)
    window.webkitRequestFileSystem ? webkitRequestFileSystem(0, 0, off, on)
    // FF
    : "MozAppearance" in document.documentElement.style ? (db = indexedDB.open("test"), db.onerror = on, db.onsuccess = off)
    // Safari
    : /constructor/i.test(window.HTMLElement) || window.safari ? tryls()
    // IE10+ & edge
    : !window.indexedDB && (window.PointerEvent || window.MSPointerEvent) ? on()
    // Rest
    : off()
}